// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: censor-checked.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messaging {

  /// <summary>Holder for reflection information generated from censor-checked.proto</summary>
  public static partial class CensorCheckedReflection {

    #region Descriptor
    /// <summary>File descriptor for censor-checked.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CensorCheckedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjZW5zb3ItY2hlY2tlZC5wcm90bxIJbWVzc2FnaW5nImsKDUNlbnNvckNo",
            "ZWNrZWQSEgoKY29tbWVudF9pZBgBIAEoAxIYChBoYXNfYmFubmVkX3dvcmRz",
            "GAIgASgIEhoKDWNlbnNvcmVkX3RleHQYAyABKAlIAIgBAUIQCg5fY2Vuc29y",
            "ZWRfdGV4dGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messaging.CensorChecked), global::Messaging.CensorChecked.Parser, new[]{ "CommentId", "HasBannedWords", "CensoredText" }, new[]{ "CensoredText" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CensorChecked : pb::IMessage<CensorChecked>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CensorChecked> _parser = new pb::MessageParser<CensorChecked>(() => new CensorChecked());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CensorChecked> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messaging.CensorCheckedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CensorChecked() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CensorChecked(CensorChecked other) : this() {
      commentId_ = other.commentId_;
      hasBannedWords_ = other.hasBannedWords_;
      censoredText_ = other.censoredText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CensorChecked Clone() {
      return new CensorChecked(this);
    }

    /// <summary>Field number for the "comment_id" field.</summary>
    public const int CommentIdFieldNumber = 1;
    private long commentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CommentId {
      get { return commentId_; }
      set {
        commentId_ = value;
      }
    }

    /// <summary>Field number for the "has_banned_words" field.</summary>
    public const int HasBannedWordsFieldNumber = 2;
    private bool hasBannedWords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBannedWords {
      get { return hasBannedWords_; }
      set {
        hasBannedWords_ = value;
      }
    }

    /// <summary>Field number for the "censored_text" field.</summary>
    public const int CensoredTextFieldNumber = 3;
    private readonly static string CensoredTextDefaultValue = "";

    private string censoredText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CensoredText {
      get { return censoredText_ ?? CensoredTextDefaultValue; }
      set {
        censoredText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "censored_text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCensoredText {
      get { return censoredText_ != null; }
    }
    /// <summary>Clears the value of the "censored_text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCensoredText() {
      censoredText_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CensorChecked);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CensorChecked other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommentId != other.CommentId) return false;
      if (HasBannedWords != other.HasBannedWords) return false;
      if (CensoredText != other.CensoredText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CommentId != 0L) hash ^= CommentId.GetHashCode();
      if (HasBannedWords != false) hash ^= HasBannedWords.GetHashCode();
      if (HasCensoredText) hash ^= CensoredText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CommentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommentId);
      }
      if (HasBannedWords != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasBannedWords);
      }
      if (HasCensoredText) {
        output.WriteRawTag(26);
        output.WriteString(CensoredText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CommentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommentId);
      }
      if (HasBannedWords != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasBannedWords);
      }
      if (HasCensoredText) {
        output.WriteRawTag(26);
        output.WriteString(CensoredText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CommentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommentId);
      }
      if (HasBannedWords != false) {
        size += 1 + 1;
      }
      if (HasCensoredText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CensoredText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CensorChecked other) {
      if (other == null) {
        return;
      }
      if (other.CommentId != 0L) {
        CommentId = other.CommentId;
      }
      if (other.HasBannedWords != false) {
        HasBannedWords = other.HasBannedWords;
      }
      if (other.HasCensoredText) {
        CensoredText = other.CensoredText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommentId = input.ReadInt64();
            break;
          }
          case 16: {
            HasBannedWords = input.ReadBool();
            break;
          }
          case 26: {
            CensoredText = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CommentId = input.ReadInt64();
            break;
          }
          case 16: {
            HasBannedWords = input.ReadBool();
            break;
          }
          case 26: {
            CensoredText = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
